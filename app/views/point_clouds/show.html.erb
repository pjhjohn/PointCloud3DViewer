<% if @point_cloud.data.nil? or @point_cloud.data.empty? %>
  <h1>Empty Data</h1>
<% else %>
  <canvas id="point_cloud_3d_canvas" style="width:100%;height:100%;position:absolute;"></canvas>
  <div style="position:absolute;left:5px;top:5px;">
    <a href="/" class="btn btn-light">Back</a>
  </div>
  <script>
    {
      let clock, canvas, renderer;
      let scene, camera, cameraControls;

      // Initial Configurations for better readability
      const initialPointColor     = 0xffffff;
      const initialCameraUp       = { x:   0, y:   0, z:  1 };
      const initialCameraPosition = { x: 250, y: 100, z: 80 };
      const initialCameraTarget   = { x:   0, y:   0, z:  0 };
      const initialGridBoundary   = 200;
      const initialGridSegments   = 40;
      const initialAxisLength     = 50;

      const onWindowResize = function() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
      };

      const initConfig = function() {
        // Clock
        clock = new THREE.Clock();

        // Canvas
        canvas = document.getElementById('point_cloud_3d_canvas');
        canvas.width  = canvas.clientWidth;
        canvas.height = canvas.clientHeight;

        // Renderer & onWindowsResize Event Registration
        renderer = new THREE.WebGLRenderer({ canvas: canvas });
        renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);
        window.addEventListener('resize', onWindowResize, false);

        // ThreeJS Scene & Camera
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, 0.1, 1000);
        camera.up.set(initialCameraUp.x, initialCameraUp.y, initialCameraUp.z);
        camera.position.set(initialCameraPosition.x, initialCameraPosition.y, initialCameraPosition.z);

        // Camera Controls
        cameraControls = new THREE.TrackballControls(camera, renderer.domElement);
        cameraControls.target.set(initialCameraTarget.x, initialCameraTarget.y, initialCameraTarget.z);

        // Grid & Axis
        const gridHelper = new THREE.GridHelper(initialGridBoundary, initialGridSegments);
        gridHelper.rotation.setFromRotationMatrix(new THREE.Matrix4().makeRotationX(Math.radians(90)));
        scene.add(gridHelper);
        const axisHelper = new THREE.AxisHelper(initialAxisLength);
        scene.add(axisHelper);

        // Lighting
        const light = new THREE.DirectionalLight(0xffffff, 0.55);
        light.position.set(0, 0, 1);
        scene.add(light);
      };

      const initScene = function() {
        // noinspection JSAnnotator
        const rawData = "<%= raw @point_cloud.data %>".split(" ");
        const data = [];
        for (let i = 0; i < rawData.length/3; i ++) data.push({ x: rawData[3*i + 0], y: rawData[3*i + 1], z: rawData[3*i + 2] });
        console.log(rawData);
        console.log(data);
        
        // Geometry
        const dataGeometry = new THREE.Geometry();
        data.map(datum => dataGeometry.vertices.push(new THREE.Vector3(datum.x, datum.y, datum.z)));
  
        // Material
        const pointsMaterial = new THREE.PointsMaterial({ color: initialPointColor, size: 3, sizeAttenuation: false });
  
        // Objects
        const points = new THREE.Points(dataGeometry, pointsMaterial);
        
        // Scene
        scene.add(points);
      };

      const render = function () {
        const delta = clock.getDelta();
        requestAnimationFrame(render);
        cameraControls.update(delta);
        renderer.render(scene, camera);
      };

      initConfig();
      initScene();
      render();
    }
  </script>
  <style>
    .container.grid-960 {
      width: 100%;
      height: 100%;
      padding: 0;
    }
  </style>
<% end %>
